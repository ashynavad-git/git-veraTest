# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master
pool:
  name: Default

stages:
- stage: Build
  jobs:
  - job: Build 
    steps:
    - task: Maven@4
      displayName: 'Maven package'
      inputs:
       mavenPomFile: 'pom.xml'
       javaHomeOption: 'JDKVersion'
       mavenVersionOption: 'Default'
       mavenAuthenticateFeed: false
       effectivePomSkip: false
    
    - bash: ls -rt '$(Build.SourcesDirectory)/target'

    - task: CopyFiles@2
      inputs:
       SourceFolder: '$(Build.SourcesDirectory)/target'
       Contents: '*.war'
       TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'Build_Artifact'
        publishLocation: 'Container'

  - job: Veracode
    dependsOn: Build
    steps:
    - bash: ls -rt '$(Build.ArtifactStagingDirectory)'
    - bash: ls -rt '$(Pipeline.Workspace)'

    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        targetPath: '$(Pipeline.Workspace)'

    - task: Veracode@3
      displayName: 'upload and scan'
      inputs:
       ConnectionDetailsSelection: 'Service Connection'
       AnalysisService: 'vera_Azure'
       veracodeAppProfile: 'Azure_vera integration'
       version: '$(build.buildNumber)'
       filepath: '$(Pipeline.Workspace)/Verademo.war'
       optargs: '-deleteincompletescan 2 ' 
       createProfile: true
       importResults: true
       failBuildIfUploadAndScanBuildStepFails: false
       maximumWaitTime: '60'

    - task: Bash@3
      displayName: 'Veracode pipeline scan'
      inputs:
       targetType: 'inline'
       script: |
          curl -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
          unzip -o pipeline-scan-LATEST.zip
          java -jar pipeline-scan.jar --veracode_api_id "$VERACODE_API_ID" --veracode_api_key "$VERACODE_API_KEY" --file "$(Pipeline.Workspace)/Verademo.war" --baseline_file "baseline.json" 

- stage: 'Deploy_to_sca'
  jobs:
  - job: 'SCA_Agent' 
    steps:
     - task: Bash@3
       displayName: 'Veracode SCA scan'
       inputs:
        targetType: 'inline'
        script: |
          export SRCCLR_API_TOKEN=$(SRCCLR_API_TOKEN)
          curl -sSL https://download.sourceclear.com/ci.sh | sh
    

#steps:
#- task: PowerShell@2
#  displayName: 'Veracode SCA scan'
#  env: {SRCCLR_API_TOKEN: $(SRCCLR_API_TOKEN)}
#  inputs:
#   targetType: 'inline'
#   script: |
#    Set-ExecutionPolicy AllSigned -Scope Process -Force
#    $ProgressPreference = "SilentlyContinue"
#    iex ((New-Object System.Net.WebClient).DownloadString('https://download.srcclr.com/ci.ps1'))
#    srcclr scan $(Build.SourcesDirectory) --update-advisor

#- task: PowerShell@2
#  inputs:
#    targetType: 'inline'
#    script: 'Invoke-WebRequest -Uri "https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip" -OutFile pipeline-scan.zip'
#- task: Veracode@3
#  inputs:
#    ConnectionDetailsSelection: 'Endpoint'
#    AnalysisService: 'Veracode'
#    veracodeAppProfile: '$(system.teamProject)'
#    version: '$(build.buildNumber)'
#    filepath: 'pipeline-scan.zip'
#    maximumWaitTime: '360'

# - task: Veracode@3
#   inputs:
#     ConnectionDetailsSelection: 'Service Connection'
#     AnalysisService: 'Veracode'
#     veracodeAppProfile: 'myapp'
#     version: '$(build.buildNumber)'
#     filepath: '/Users/amitashokshynavad/myagent/_work/5/s/target/verademo.war'
#     createProfile: false
#     failBuildIfUploadAndScanBuildStepFails: true
#     importResults: true
#     maximumWaitTime: '60'
 


# - task: VeracodePipelineScan@0
#   inputs:
#     VeracodeAPIID: '$(vid)'
#     VeracodeAPIsecret: '$(vkey)'
#     fileToScan: '$(System.DefaultWorkingDirectory)/verademo.war'

# - task: Veracode Flaw Importer@3
#   inputs:
#     ConnectionDetailsSelection: 'Service Connection'
#     AnalysisService: 'vera_Azure'
#     veracodeAppProfile: 'myapp'
#     scanType: 'Static, SCA'
#     importType: 'All Unmitigated Flaws Violating Policy'
#     workItemType: 'Bug'
#     area: 'Azure_vera integration'
#     overwriteAreaPathInWorkItemsOnImport: true
#     iterationPath: 'Azure_vera integration'
#     overwriteIterationPath: true
#     flawImportLimit: '10'